React notes

- Behind the scenes it calls: ReactDOM.render(JSX, document.getElementById('root'))
- Code within curly braces is treated as Javascript: {'Some code here'}
- Babel is a transpiler to convert JSX to Javascript
- Nested JSX must always return a single element
- Comments in code {/* Comment here */}
- ReactDOM offers a simple method to render React elements to the DOM which looks like this: ReactDOM.render(componentToRender, targetNode), where the first argument is the React element or component that you want to render, and the second argument is the DOM node that you want to render the component to.
- One key difference in JSX is that you can no longer use the word class to define HTML classes. This is because class is a reserved word in JavaScript. Instead, JSX uses className
- In fact, the naming convention for all HTML attributes and event references in JSX become camelCase. For example, a click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange
- Auto closed tags must have space  e.g. <br />
- A component - create JS function that _returns_ JSX or null
- React requires function name to start with a capital letter
- Example of a React component with ES6 class syntax: 

class Kitten extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <h1>Hi</h1>
    );
  }
}

- To include component as a child, you include component name as a custom HTML tag. e.g. <MyComponent /> 
- To render a component to the ReactDOM, you include the custom HTML tag, instead of the JSX component:
	ReactDOM.render(<TypesOfFood />, document.getElementById("challenge-node"))

- De facto standard is to pass values in props var into the JSX functional component.
- Array must be treated as JS
- Default props :  MyComponent.defaultProps = { location: 'San Francisco' }
- Passing properties that are not strings, means you have to wrap them in {}
- Always access props using this.props.someVariable!! 

PropTypes
- Use PropTypes to specify the props types that are passed in, including whether they are required,  
- Defined in the same way as default props : MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }
- Must be imported independently: import React, { PropTypes } from 'react';
- ES6 Class components access props slightly differently. Use {this.props.someProperty}

Stateless functional component vs Stateless component vs Stateful Component
- A stateless functional component is any function you write which accepts props and returns JSX. A stateless component, on the other hand, is a class that extends React.Component, but does not use internal state (covered in the next challenge). Finally, a stateful component is any component that does maintain its own internal state. You may see stateful components referred to simply as components or React components.

State in components
- You create state in a React component by declaring a state property on the component class in its constructor. This initializes the component with state when it is created. The state property must be set to a JavaScript object : 

this.state = {
  // describe your state here
  // example:
  name: "Spongebob Squarepants"
}

- If you want to access a state value within the return of the render method, you have to enclose the value in curly braces.
- this.setState({{key: value, anotherKey: someValue}) to change the state of a component from within the component

- Button click example: 
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'Initial State'
    };
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    // change code below this line
    this.setState({name: "React Rocks!"});
    // change code above this line
  }
  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Click Me</button>
        <h1>{this.state.name}</h1>
      </div>
    );
  }
};


- We have to explicitly bind 'this' to a method in order for 'this' to be accessible in the metohd (see button click example above).
In addition to setting and updating state, you can also define methods for your component class. A class method typically needs to use the this keyword so it can access properties on the class (such as state and props) inside the scope of the method. There are a few ways to allow your class methods to access this.

One common way is to explicitly bind this in the constructor so this becomes bound to the class methods when the component is initialized. You may have noticed the last challenge used this.handleClick = this.handleClick.bind(this) for its handleClick method in the constructor. Then, when you call a function like this.setState() within your class method, this refers to the class and will not be undefined.

- Must set state with this.setState({blah: newValue})

- Input text field 

class ControlledInput extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: ''
    };
    // change code below this line
    this.handleChange = this.handleChange.bind(this);
    // change code above this line
  }
  // change code below this line
  handleChange(event) {
    this.setState({input: event.target.value});
  }
  // change code above this line
  render() {
    return (
      <div>
        { /* change code below this line */}
        <input value={this.state.input} onChange={this.handleChange}></input>
        { /* change code above this line */}
        <h4>Controlled Input:</h4>
        <p>{this.state.input}</p>
      </div>
    );
  }
};


- Another example

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      submit: ''
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  handleSubmit(event) {
    // change code below this line
    this.setState({
      submit: this.state.input
    });
    event.preventDefault();
    // change code above this line
  }
  render() {
    return (
      <div>
        <form onSubmit={this.handleSubmit}>
          { /* change code below this line */}
          <input value={this.state.input} onChange={this.handleChange}></input>
          { /* change code above this line */}
          <button type='submit'>Submit!</button>
        </form>
        { /* change code below this line */}
        <h1>{this.state.submit}</h1>
        { /* change code above this line */}
      </div>
    );
  }
};


- Lifecycle methods provide opportunities to perform actions at certain points in the lifecycle of a component.
Some of the methods are :
componentWillMount()
componentDidMount()
componentWillReceiveProps()
shouldComponentUpdate()
componentWillUpdate()
componentDidUpdate()
componentWillUnmount()

- The best practice with React is to place API calls or any calls to your server in the lifecycle method componentDidMount(). This method is called after a component is mounted to the DOM. Any calls to setState() here will trigger a re-rendering of your component. When you call an API in this method, and set your state with the data that the API returns, it will automatically trigger an update once you receive the data.


- Event Listners
The componentDidMount() method is also the best place to attach any event listeners you need to add for specific functionality. React provides a synthetic event system which wraps the native event system present in browsers. This means that the synthetic event system behaves exactly the same regardless of the user's browser - even if the native events may behave differently between different browsers.


class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: ''
    };
    this.handleEnter = this.handleEnter.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
  }
  // change code below this line
  componentDidMount() {
    // *** Not sure why this method needs this...
    document.addEventListener('keydown', this.handleKeyPress);
  }
  componentWillUnmount() {
    // *** but this component doesn't need it
    document.removeEventListener('keydown', this.handleEnter);
  }
  // change code above this line
  handleEnter() {
    this.setState({
      message: this.state.message + 'You pressed the enter key! '
    });
  }
  handleKeyPress(event) {
    if (event.keyCode === 13) {
      this.handleEnter();
    }
  }
  render() {
    return (
      <div>
        <h1>{this.state.message}</h1>
      </div>
    );
  }
};

- Another lifecycle method is componentWillReceiveProps() which is called whenever a component is receiving new props. *** This method receives the new props as an argument ***, which is usually written as nextProps
- Another method is componentDidUpdate(), and is called immediately after a component re-renders
- React provides a lifecycle method you can call when child components receive new state or props, and declare specifically if the components should update or not. The method is shouldComponentUpdate(), and it takes nextProps and nextState as parameters. The method must return a boolean value that tells React whether or not to update the component. You can compare the current props (this.props) to the next props (nextProps) to determine if you need to update or not, and return true or false accordingly.
- 
shouldComponentUpdate(nextProps, nextState) {
    console.log('Should I update?');
    // change code below this line
     if (nextProps.value%2 == 0) {
      return true;
     } else {
       return false;
     }
    
     // change code above this line
  }

- Styling elements must be set in a Javascript Object as follows: 
 <div style={{color: "red", fontSize: 72}} >Big Red</div>

- Hyphenated words like font-size are invalid syntax for JavaScript object properties, so React uses camel case. As a rule, any hyphenated style properties are written using camel case in JSX.
- All property value length units (like height, width, and fontSize) are assumed to be in px unless otherwise specified. If you want to use em, for example, you wrap the value and the units in quotes, like {fontSize: "4em"}. Other than the length values that default to px, all other property values should be wrapped in quotes.

- Declare styles in a separate Javascript object : 
const styles = {
  color: "purple",
  fontSize: 40,
  border: "2px solid purple"
}
// change code above this line
class Colorful extends React.Component {
  render() {
    // change code below this line
    return (
      <div style={styles}>Style Me!</div>
    );
    // change code above this line
  }
};


- Instead, you can use the && logical operator to perform conditional logic in a more concise way. This is possible because you want to check if a condition is true, and if it is, return some markup. Here's an example:

{condition && <p>markup</p>}

If the condition is true, the markup will be returned. If the condition is false, the operation will immediately return false after evaluating the condition and return nothing. You can include these statements directly in your JSX and string multiple conditions together by writing && after each one. This allows you to handle more complex conditional logic in your render() method without repeating a lot of code.

- Conditioning styling

class GateKeeper extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: ''
    };
    this.handleChange = this.handleChange.bind(this);
  }
  handleChange(event) {
    this.setState({ input: event.target.value })
  }
  render() {
    let inputStyle = {
      border: '1px solid black'
    };
    // change code below this line
    let redStyle = {
      border: '3px solid red'
    };
    // change code above this line
    return (
      <div>
        <h3>Don't Type Too Much:</h3>
        <input
          type="text"
          style={(this.state.input.length <= 15) ? inputStyle : redStyle}
          value={this.state.input}
          onChange={this.handleChange} />
      </div>
    );
  }
};


- Simple ToDoList creator
const textAreaStyles = {
  width: 235,
  margin: 5
};

class MyToDoList extends React.Component {
  constructor(props) {
    super(props);
    // change code below this line
    this.state = {
      userInput: '',
      toDoList: []
    }
    // change code above this line
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }
  handleSubmit() {
    const itemsArray = this.state.userInput.split(',');
    this.setState({
      toDoList: itemsArray
    });
  }
  handleChange(e) {
    this.setState({
      userInput: e.target.value
    });
  }

  render() {
    console.log(this.state.toDoList);
    const items = this.state.toDoList.map(x => <li>{x}</li>);
    return (
      <div>
        <textarea
          onChange={this.handleChange}
          value={this.state.userInput}
          style={textAreaStyles}
          placeholder="Separate Items With Commas" /><br />
        <button onClick={this.handleSubmit}>Create List</button>
        <h1>My "To Do" List:</h1>
        <ul>
          {items}
        </ul>
      </div>
    );
  }
};


- When you create an array of elements, each one needs a key attribute set to a unique value. React uses these keys to keep track of which items are added, changed, or removed. This helps make the re-rendering process more efficient when the list is modified in any way. Note that keys only need to be unique between sibling elements, they don't need to be globally unique in your application.
**** I think they mean that the items in the list need to each have a unique key. But need to verify this.


- Rendering React on the Server 
So far, you have been rendering React components on the client. Normally, this is what you will always do. However, there are some use cases where it makes sense to render a React component on the server. Since React is a JavaScript view library and you can run JavaScript on the server with Node, this is possible. In fact, React provides a renderToString() method you can use for this purpose.

There are two key reasons why rendering on the server may be used in a real world app. First, without doing this, your React apps would consist of a relatively empty HTML file and a large bundle of JavaScript when it's initially loaded to the browser. This may not be ideal for search engines that are trying to index the content of your pages so people can find you. If you render the initial HTML markup on the server and send this to the client, the initial page load contains all of the page's markup which can be crawled by search engines. Second, this creates a faster initial page load experience because the rendered HTML is smaller than the JavaScript code of the entire app. React will still be able to recognize your app and manage it after the initial load.






-- React & Webpack

https://www.youtube.com/watch?v=uextYhQGP6k

package.json - npm configs
npm init
npm install react react-dom --save (2 main packages)
(Development dependencies)
npm install webpack webpack-dev-server babel-loader babel-preset-es2015 babel-preset-react bable-preset-stage-2 --save-dev


